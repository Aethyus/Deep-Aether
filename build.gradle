buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven {
            name 'Gradle'
            url "https://plugins.gradle.org/m2/"
        }

        maven {
            name 'Sponge'
            url 'https://repo.spongepowered.org/maven'
        }

        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'io.github.0ffz', name: 'gpr-for-gradle', version: '1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+', changing: true
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'io.github.0ffz.github-packages'
apply plugin: 'org.spongepowered.mixin'

version = 'r1.19.2-r1.0.8'
group = 'com.teamrazor.deep_aether'
archivesBaseName = 'deep_aether'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'deep_aether'

            mods {
                deepaether {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'deep_aether'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'deep_aether'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', 'REGISTRIES'
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'deep_aether', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url = "https://maven.jaackson.me"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    flatDir {
        dir 'libs'
    }
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.23'
    implementation fg.deobf('local:geckolib:forge-1.19-3.1.40')
    implementation fg.deobf("local:aether:1.19.2-1.0.0-beta.6-forge")
    implementation fg.deobf('local:aeroblender:1.19.2-1.0.1')
    //implementation fg.deobf('local:lost_aether_content:1.19.4-1.1.0')
    //implementation fg.deobf('local:structure_gel:1.19.4-2.12.0')
    //implementation fg.deobf('local:aether_genesis:1.19.4-0.0.1-forge')
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.4.1")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.4.1:api")
    //implementation fg.deobf('local:aether_redux:a1.0.1-mc1.19.4')
    implementation fg.deobf('com.github.glitchfiend:TerraBlender-forge:1.19.2-2.0.1.166')
    implementation fg.deobf("com.aetherteam.nitrogen:nitrogen_internals:1.19.2-0.1.0-forge")
    implementation fg.deobf("com.aetherteam.cumulus:cumulus_menus:1.19.2-0.1.0-forge")

}

//mixin {
//    config "deep_aether.mixins.json"
//    add sourceSets.main, "deep_aether.refmap.json"
//}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "deep_aether",
                "Specification-Vendor"    : "razordevs",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "razordevs",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

import net.neoforged.gradle.common.tasks.JarJar

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
    id 'io.github.0ffz.github-packages' version '[1,2)'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = "${project.mc_version}-${project.mod_version}"
group = "io.github.razordevs.${project.mod_id}"

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'info'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
    }
    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing-mod', 'aether'
    }
}


sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven githubPackage.invoke("The-Aether-Team/Protect-Your-Moa")
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = "https://maven.wispforest.io" }
    maven { url = "https://maven.wispforest.io/releases" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.fabricmc.net' }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://jitpack.io" }
    maven {
        name "Modding Legacy Maven"
        url "https://maven.moddinglegacy.com/maven"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'libs'
    }
    mavenCentral()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    //Dependencies
    //implementation("com.aetherteam.aether:aether:${project.aether_version}")
    implementation("local:aether:${project.aether_version}")
    implementation("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}")
    implementation("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")
    implementation "io.wispforest:accessories-neoforge:${project.accessories_version}+${project.mc_version}"


    implementation("local:aeroblender:${project.aeroblender_version}")
    jarJar("local:aeroblender:${project.aeroblender_version}") {
        jarJar.ranged(it, "[1.21-1.0.0-neoforge,)")
    }
    jarJar("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}") {
        jarJar.ranged(it, "[${project.terrablender_version},)")
    }

    jarJar("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}") {
        jarJar.ranged(it, "[${project.nitrogen_version},)")
        jarJar.pin(it, "${project.nitrogen_version}")
    }

    jarJar("io.wispforest:accessories-neoforge:${project.accessories_version}+${project.mc_version}") {
        jarJar.ranged(it, "[${project.accessories_version}+${project.mc_version},)")
        jarJar.pin(it, "${project.accessories_version}+${project.mc_version}")
    }

    compileOnly "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"

    //Optional Dependencies
    compileOnly "mezz.jei:jei-${project.mc_version}-common-api:${project.jei_version}"
    compileOnly "mezz.jei:jei-${project.mc_version}-neoforge:${project.jei_version}"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.compilerArgs << "-Xmaxerrs" << "9000"
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'no-embeds'
}

tasks.named('jarJar', JarJar).configure {
    archiveClassifier = ''
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

compileJava {
    options.incremental = false
}

build {
    dependsOn 'jarJar'
}

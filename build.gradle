import net.neoforged.gradle.common.tasks.JarJar

plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
    id 'io.github.0ffz.github-packages' version '[1,2)'
}


version = "${project.mc_version}-${project.mod_version}"
group = "io.github.razordevs.${project.mod_id}"
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', 'deep_aether', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing-mod', 'aether'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven githubPackage.invoke("The-Aether-Team/Protect-Your-Moa")
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = "https://maven.wispforest.io" }
    maven { url = "https://maven.wispforest.io/releases" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.fabricmc.net' }
    maven { url = "https://maven.blamejared.com" }

    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        name "Modding Legacy Maven"
        url "https://maven.moddinglegacy.com/maven"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'libs'
    }
    mavenCentral()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    //Dependencies
    //implementation("com.aetherteam.aether:aether:${project.aether_version}")
    implementation("local:aether:${project.aether_version}")
    implementation("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}")
    implementation("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")
    implementation "io.wispforest:accessories-neoforge:${project.accessories_version}+${project.mc_version}"


    implementation("local:aeroblender:${project.aeroblender_version}")
    jarJar("local:aeroblender:${project.aeroblender_version}") {
        jarJar.ranged(it, "[1.21-1.0.0-neoforge,)")
    }
    jarJar("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}") {
        jarJar.ranged(it, "[${project.terrablender_version},)")
    }

    jarJar("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}") {
        jarJar.ranged(it, "[${project.nitrogen_version},)")
        jarJar.pin(it, "${project.nitrogen_version}")
    }

    jarJar("io.wispforest:accessories-neoforge:${project.accessories_version}+${project.mc_version}") {
        jarJar.ranged(it, "[${project.accessories_version}+${project.mc_version},)")
        jarJar.pin(it, "${project.accessories_version}+${project.mc_version}")
    }

    compileOnly "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"

    //Optional Dependencies
    compileOnly "mezz.jei:jei-${project.mc_version}-common-api:${project.jei_version}"
    compileOnly "mezz.jei:jei-${project.mc_version}-neoforge:${project.jei_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "deep_aether",
                "Specification-Vendor"    : "razordevs",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "razordevs",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    archiveClassifier = 'no-embeds'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.named('jarJar', JarJar).configure {
    archiveClassifier = ''
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

build {
    dependsOn 'jarJar'
}

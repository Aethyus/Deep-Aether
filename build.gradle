import net.neoforged.gradle.common.tasks.JarJar

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.97'
    id 'io.github.0ffz.github-packages' version '[1,2)'
}


version = "${project.mc_version}-${project.mod_version}"
group = 'com.teamrazor.deep_aether'
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"


   minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', 'deep_aether', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing-mod', 'aether'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven githubPackage.invoke("The-Aether-Team/Protect-Your-Moa")
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        name "Modding Legacy Maven"
        url "https://maven.moddinglegacy.com/maven"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'libs'
    }
    mavenCentral()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    //Dependencies
    implementation("software.bernie.geckolib:geckolib-neoforge-${project.mc_version}:${project.geckolib_version}")
    implementation("com.aetherteam.aether:aether:${project.aether_version}")
    runtimeOnly("curse.maven:aether-emissivity-916028:4765812")
    runtimeOnly("top.theillusivec4.curios:curios-neoforge:${project.curios_version}")
    compileOnly("top.theillusivec4.curios:curios-neoforge:${project.curios_version}:api")
    implementation("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}")
    implementation("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")

    implementation("local:aeroblender:1.20.4-1.0.1-neoforge")
    jarJar("local:aeroblender:1.20.4-1.0.1-neoforge") {
        jarJar.ranged(it, "[1.20.4-1.0.1-neoforge,)")
    }
    jarJar("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}") {
        jarJar.ranged(it, "[${project.terrablender_version},)")
    }

    //Optional Dependencies
    compileOnly("curse.maven:aether-lost-content-318602:${project.lost_aether_content_version}")
    compileOnly("com.legacy:structure-gel:${project.structure_gel_version}")
    compileOnly("curse.maven:aether-redux-867237:${project.aether_redux_version}")
    compileOnly("mezz.jei:jei-${mc_version}-common-api:${project.jei_version}")
    compileOnly("mezz.jei:jei-${mc_version}-neoforge:${project.jei_version}")
    runtimeOnly compileOnly("mezz.jei:jei-${mc_version}-neoforge:${project.jei_version}")
    compileOnly("curse.maven:ancient-aether-886751:${ancient_aether_version}")
    compileOnly("local:aether_protect_your_moa:${project.protect_your_moa_version}")}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "deep_aether",
                "Specification-Vendor"    : "razordevs",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "razordevs",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    archiveClassifier = 'no-embeds'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.named('jarJar', JarJar).configure {
    archiveClassifier = ''
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

build {
    dependsOn 'jarJar'
}
